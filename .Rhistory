# Cargar la librería data.table
library(data.table)
# Cargar la librería data.table
library(data.table)
# Listar todos los archivos .tab en el directorio
archivos_tab <- list.files(pattern = "\\.tab$")
# Leer y combinar todos los archivos en un solo data.table
datos_combinados <- rbindlist(lapply(archivos_tab, fread))
# Nombrar las columnas del data.table
setnames(datos_combinados, c("Analysis_ID", "Cis_Element", "Sequence", "Position", "Length", "Strand", "Species", "Description"))
# Revisar las primeras filas para confirmar que los nombres se asignaron correctamente
head(datos_combinados)
# Cargar la librería data.table
library(data.table)
# Cargar la librería data.table
library(data.table)
# Listar todos los archivos .tab en el directorio
archivos_tab <- list.files(pattern = "\\.tab$")
# Leer y combinar todos los archivos en un solo data.table
datos_combinados <- rbindlist(lapply(archivos_tab, fread))
# Nombrar las columnas del data.table
setnames(datos_combinados, c("Analysis_ID", "Cis_Element", "Sequence", "Position", "Length", "Strand", "Species", "Description"))
# Revisar las primeras filas para confirmar que los nombres se asignaron correctamente
head(datos_combinados)
# Crear un vector con los cis elements de interes
cis_interes <- c("Light responsive elements",
"Abscisic acid responsiveness",
"Ethylene-responsive element",
"MeJA-responsiveness",
"Auxin responsiveness",
"Gibberellin-responsive element",
"Salicylic acid responsiveness",
"Heat stress responsiveness",
"Low-temperature responsiveness",
"Drought-inducibility (MYB)",
"Defense and stress responsiveness",
"Anaerobic induction",
"Fungal elicitor responsive element",
"Wounding and pathogen responsievness",
"Dehydration, low-temp, salt stresses",
"Endosperm-specific negative expression",
"Zein metabolism regulation",
"Root-specific expression",
"Meristem expression",
"Circadian control",
"Endosperm expression",
"Seed-specific regulation",
"Differentiation of the palisade mesophyll cells",
"Leaf morphology development",
"Cell cycle regulation")
# Filtrar los datos para quedarte solo con las filas donde el 'Description' coincide con los términos de interés
datos_filtrados <- datos_combinados[Description %chin% cis_interes]
# Crear un vector con los cis elements de interes
# Crear un vector con los términos de interés modificados
cis_interes <- c("cis-acting regulatory element involved in the MeJA-responsiveness",
"cis-acting regulatory element involved in light responsiveness",
"element involved in differentiation of the palisade mesophyll cells",
"cis-acting element involved in low-temperature responsiveness",
"cis-acting element involved in the abscisic acid responsiveness",
"light responsive element",
"cis-acting regulatory element related to meristem expression",
"cis-acting element involved in defense and stress responsiveness",
"cis-acting regulatory element essential for the anaerobic induction",
"cis-acting element involved in gibberellin-responsiveness",
"cis-acting element involved in salicylic acid responsiveness",
"cis-acting regulatory element involved in circadian control",
"cis-acting element involved in cell cycle regulation",
"cis-acting element involved in phytochrome down-regulation expression",
"cis-acting regulatory element involved in auxin responsiveness")
# Filtrar los datos para quedarte solo con las filas donde el 'Description' coincide con los términos de interés
datos_filtrados <- datos_combinados[Description %chin% cis_interes]
View(datos_filtrados)
# Revisar las primeras filas de los datos filtrados
head(datos_filtrados)
library(ggplot2)
# Agrupar y contar los elementos cis por cada gen en este caso seria la columna Analisis_ID
conteo_cis <- datos_filtrados[, .(Count = .N), by = .(Analysis_ID, Cis_Element)]
View(conteo_cis)
# Crear el gráfico de barras
ggplot(conteo_cis, aes(x = Analysis_ID, y = Count, fill = Cis_Element)) +
geom_bar(stat = "identity", position = "stack") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Conteo de elementos cis por gen",
x = "Gen (Analysis_ID)",
y = "Cantidad de elementos cis",
fill = "Elemento cis") +
theme_minimal()
View(conteo_cis)
View(datos_filtrados)
View(datos_filtrados)
# Agrupar y contar los elementos cis por cada gen, usando la columna Description
conteo_cis <- datos_filtrados[, .(Count = .N), by = .(Analysis_ID, Description)]
# Agrupar y contar los elementos cis por cada gen, usando la columna Description
conteo_cis <- datos_filtrados[, .(Count = .N), by = .(Analysis_ID, Description)]
# Crear el gráfico de barras
ggplot(conteo_cis, aes(x = Analysis_ID, y = Count, fill = Description)) +
geom_bar(stat = "identity", position = "stack") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Conteo de elementos cis por gen",
x = "Gen (Analysis_ID)",
y = "Cantidad de elementos cis",
fill = "Descripción del elemento cis") +
theme_minimal()
View(conteo_cis)
# Leer el archivo txt que contiene los nombres de los genes para cambiar ID de busqueda de plantcare
nombres_genes <- fread("rename.txt", header = FALSE)
# Asignar nombres a las columnas
setnames(nombres_genes, c("Analysis_ID", "Gene_Name"))
# Unir la tabla de referencia con los datos filtrados
datos_filtrados <- merge(datos_filtrados, nombres_genes, by = "Analysis_ID", all.x = TRUE)
View(datos_filtrados)
# Reemplazar la columna Analysis_ID por los nombres de los genes
datos_filtrados[, Analysis_ID := Gene_Name]
View(datos_filtrados)
# Eliminar la columna Gene_Name si no es necesaria
datos_filtrados[, Gene_Name := NULL]
# Revisar las primeras filas para confirmar los cambios
head(datos_filtrados)
# Agrupar y contar los elementos cis por cada gen, usando la columna Description
conteo_cis <- datos_filtrados[, .(Count = .N), by = .(Analysis_ID, Description)]
# Crear el gráfico de barras
ggplot(conteo_cis, aes(x = Analysis_ID, y = Count, fill = Description)) +
geom_bar(stat = "identity", position = "stack") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Conteo de elementos cis por gen",
x = "Gen (Analysis_ID)",
y = "Cantidad de elementos cis",
fill = "Descripción del elemento cis") +
theme_minimal()
# Crear el gráfico de barras
grafico_cis <- ggplot(conteo_cis, aes(x = Analysis_ID, y = Count, fill = Description)) +
geom_bar(stat = "identity", position = "stack") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Conteo de elementos cis por gen",
x = "Gen (Analysis_ID)",
y = "Cantidad de elementos cis",
fill = "Descripción del elemento cis") +
theme_minimal()
# Guardar el gráfico en formato TIFF con resolución de 300 DPI
ggsave("grafico_elementos_cis.tiff", plot = grafico_cis, dpi = 300, width = 10, height = 8, units = "in", device = "tiff")
# Crear el gráfico de barras
grafico_cis <- ggplot(conteo_cis, aes(x = Analysis_ID, y = Count, fill = Description)) +
geom_bar(stat = "identity", position = "stack") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 10, face = "bold", family = "Arial"),
legend.text = element_text(size = 10, face = "bold", family = "Arial"),
legend.position = "bottom",
legend.key.size = unit(0.5, "cm")) +
labs(title = "Conteo de elementos cis por gen",
x = "Gen (Analysis_ID)",
y = "Cantidad de elementos cis",
fill = "Descripción del elemento cis") +
theme_minimal()
# Guardar el gráfico en formato TIFF con resolución de 300 DPI
ggsave("grafico_elementos_cis.tiff", plot = grafico_cis, dpi = 300, width = 10, height = 8, units = "in", device = "tiff")
# Crear el gráfico de barras
grafico_cis <- ggplot(cis_elements_long, aes(x = GEN, y = Count, fill = Element)) +
geom_bar(stat = "identity", width = 0.7) +  # Ajustar el ancho de las barras
scale_fill_manual(values = scales::hue_pal()(length(unique(cis_elements_long$Element)))) +  # Usar colores por defecto de ggplot2
theme_minimal() +
labs(title = "Distribución de Elementos Responsivos en Genes MYB",
x = "Gen",
y = "Cantidad de Elementos Responsivos") +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, face = "bold", size = 10, family = "Arial"),  # Rotar y ajustar el tamaño de las etiquetas
legend.position = "right",  # Mover la leyenda a la derecha
legend.title = element_text(size = 8, family = "Arial"),  # Reducir el tamaño del título de la leyenda y cambiar la fuente
legend.text = element_text(size = 6, family = "Arial"),  # Reducir el tamaño del texto de la leyenda y cambiar la fuente
legend.key.size = unit(0.5, "cm"),  # Reducir el tamaño de los cuadros de color en la leyenda
legend.box.margin = margin(0, 20, 0, 0),  # Añadir espacio entre el gráfico y la leyenda
text = element_text(color = "black", family = "Arial")
)
grafico_cis
# Guardar el gráfico en formato TIFF con resolución de 300 DPI
ggsave("grafico_elementos_cis.tiff", plot = grafico_cis, dpi = 300, width = 10, height = 8, units = "in", device = "tiff")
# Crear el gráfico de barras
grafico_cis <- ggplot(conteo_cis, aes(x = Analysis_ID, y = Count, fill = Description)) +
geom_bar(stat = "identity", width = 0.7) +  # Ajustar el ancho de las barras
scale_fill_manual(values = scales::hue_pal()(length(unique(conteo_cis$Description)))) +  # Usar colores inclusivos por defecto
theme_minimal() +
labs(title = "Conteo de elementos cis por gen",
x = "Gen (Analysis_ID)",
y = "Cantidad de elementos cis") +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, face = "bold", size = 10, family = "Arial"),  # Rotar etiquetas del eje X
legend.position = "right",  # Mover la leyenda a la derecha
legend.title = element_text(size = 8, family = "Arial"),  # Ajustar tamaño del título de la leyenda
legend.text = element_text(size = 6, family = "Arial"),  # Reducir tamaño del texto de la leyenda
legend.key.size = unit(0.5, "cm"),  # Reducir tamaño de los cuadros de color en la leyenda
legend.box.margin = margin(0, 20, 0, 0),  # Añadir espacio entre gráfico y leyenda
text = element_text(color = "black", family = "Arial")  # Establecer color y tipografía general
)
# Guardar el gráfico en formato TIFF con resolución de 300 DPI
ggsave("grafico_elementos_cis.tiff", plot = grafico_cis, dpi = 300, width = 10, height = 8, units = "in", device = "tiff")
# Crear el gráfico de barras
grafico_cis <- ggplot(conteo_cis, aes(x = Analysis_ID, y = Count, fill = Description)) +
geom_bar(stat = "identity", width = 0.7) +  # Ajustar el ancho de las barras
scale_fill_manual(values = scales::hue_pal()(length(unique(conteo_cis$Description)))) +  # Usar colores inclusivos por defecto
theme_minimal() +
labs(title = "Conteo de elementos cis por gen",
x = "Gen (Analysis_ID)",
y = "Cantidad de elementos cis") +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, face = "bold", size = 8, family = "Arial"),  # Rotar etiquetas del eje X
legend.position = "right",  # Mover la leyenda a la derecha
legend.title = element_text(size = 8, family = "Arial"),  # Ajustar tamaño del título de la leyenda
legend.text = element_text(size = 6, family = "Arial"),  # Reducir tamaño del texto de la leyenda
legend.key.size = unit(0.5, "cm"),  # Reducir tamaño de los cuadros de color en la leyenda
legend.box.margin = margin(0, 20, 0, 0),  # Añadir espacio entre gráfico y leyenda
text = element_text(color = "black", family = "Arial")  # Establecer color y tipografía general
)
# Guardar el gráfico en formato TIFF con resolución de 300 DPI
ggsave("grafico_elementos_cis.tiff", plot = grafico_cis, dpi = 300, width = 10, height = 8, units = "in", device = "tiff")
# Guardar el gráfico en formato TIFF con resolución de 300 DPI
ggsave("grafico_elementos_cis.tiff", plot = grafico_cis, dpi = 300, width = 12, height = 8, units = "in", device = "tiff")
# Guardar el gráfico en formato TIFF con resolución de 300 DPI
ggsave("grafico_elementos_cis.tiff", plot = grafico_cis, dpi = 300, width = 14, height = 8, units = "in", device = "tiff")
library(data.table)
detach("package:data.table", unload = TRUE)
library(data.table)
